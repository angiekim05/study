# 1자리 숫자로 글자가 만들어진 경우 
# 그 다음 자리 숫자까지 포함하여 한 개의 알파벳을 만드는 경우와
# 각각 두 개의 알파벳을 만는 경우가 있다.
# 반면 숫자 두 개로 한 개의 알파벳을 만든 경우
# 다음에는 1개 숫자로 알파벳을 추가하는 경우 한 가지가 있다. 
# 0은 그 자체로 알파벳을 만들 수 없고
# 1~26까지의 알파벳만 존재한다는 조건을 만족하는 경우의 수만 체크한다. 
# 1  ->  1/1  ->  1/1/1  ->  1/1/1/1
#                            1/1/1 1 
#                 1/1 1  ->  1/1 1/1
#        1 1  ->  1 1/1  ->  1 1/1/1
#                            1 1/1 1

cord = list(map(int,list(input().strip())))
n = len(cord)
# 마지막 자리 글자가 숫자 1개를 사용한 것인지 
# 2개를 사용한 것인지 분리해서 dp에 경우의 수 담기
dp = [[0,0] for _ in range(n)]
dp[0][0] = 1 # 처음에 무조건 숫자 1개로 1개 알파벳이 만들어짐
if cord[0] == 0:
    print(0) # 알파벳을 만들 수 없음. -> 0
else:
    for i in range(1,n):
        # 숫자 0이지만 10,20을 만들 수 있다면 통과 그 외에는 알파벳 만들 수 없음
        if cord[i] == 0:
            if dp[i-1][0] and cord[i-1] in [1,2]:
                dp[i][1] += dp[i-1][0]%1000000
            else:
                break
        else:
            dp[i][0] += (dp[i-1][0] + dp[i-1][1])%1000000 # 0이 아닌 1~9 숫자는 무조건 알파벳 가능
            # 10~26 사이의 숫자면 알파벳 가능
            if dp[i-1][0] and cord[i-1]*10+cord[i] <= 26:
                dp[i][1] += dp[i-1][0]%1000000
    print((dp[-1][0]+dp[-1][1])%1000000)
# print(dp)